import argparse
import hashlib
import traceback

import pymongo
from ebi_eva_common_pyutils.logger import logging_config
from ebi_eva_common_pyutils.mongodb import MongoDatabase
from pymongo import WriteConcern
from pymongo.read_concern import ReadConcern

logger = logging_config.get_logger(__name__)
logging_config.add_stdout_handler()


def get_SHA1(variant_rec):
    """Calculate the SHA1 digest from the seq, study, contig, start, ref, and alt attributes of the variant"""
    h = hashlib.sha1()
    keys = ['seq', 'study', 'contig', 'start', 'ref', 'alt']
    h.update('_'.join([str(variant_rec[key]) for key in keys]).encode())
    return h.hexdigest().upper()


def get_contig_equivalents():
    return {
        '1_random.1': 'AABR07046142.1',
        '1_random.15': 'KL567881.1',
        '1_random.2': 'KL567884.1',
        '1_random.21': 'KL567886.1',
        '1_random.23': 'KL567887.1',
        '1_random.27': 'KL567889.1',
        '1_random.4': 'KL567892.1',
        '1_random.7': 'KL567893.1',
        '1_random.8': 'KL567894.1',
        '1_random.9': 'KL567895.1',
        '2_random.1': 'AABR07045875.1',
        '2_random.16': 'AABR07045975.1',
        '2_random.22': 'AABR07046014.1',
        '2_random.10': 'KL567896.1',
        '2_random.11': 'KL567897.1',
        '2_random.12': 'KL567898.1',
        '2_random.14': 'KL567900.1',
        '2_random.15': 'KL567901.1',
        '2_random.17': 'KL567902.1',
        '2_random.18': 'KL567903.1',
        '2_random.20': 'KL567906.1',
        '2_random.21': 'KL567907.1',
        '2_random.23': 'KL567908.1',
        '2_random.3': 'KL567909.1',
        '2_random.4': 'KL567910.1',
        '2_random.5': 'KL567911.1',
        '2_random.6': 'KL567912.1',
        '2_random.7': 'KL567913.1',
        '2_random.8': 'KL567914.1',
        '3_random.22': 'AABR07046319.1',
        '3_random.11': 'KL567916.1',
        '3_random.15': 'KL567919.1',
        '3_random.17': 'KL567920.1',
        '3_random.18': 'KL567921.1',
        '3_random.20': 'KL567924.1',
        '3_random.23': 'KL567926.1',
        '3_random.24': 'KL567927.1',
        '3_random.8': 'KL567931.1',
        '4_random.1': 'KL567933.1',
        '4_random.11': 'KL567934.1',
        '4_random.12': 'KL567935.1',
        '4_random.14': 'KL567937.1',
        '4_random.15': 'KL567938.1',
        '4_random.16': 'KL567939.1',
        '4_random.2': 'KL567940.1',
        '4_random.3': 'KL567941.1',
        '4_random.5': 'KL567943.1',
        '4_random.6': 'KL567944.1',
        '4_random.7': 'KL567945.1',
        '4_random.8': 'KL567946.1',
        '4_random.9': 'KL567947.1',
        '5_random.11': 'KL567950.1',
        '5_random.12': 'KL567951.1',
        '5_random.13': 'KL567952.1',
        '5_random.14': 'KL567953.1',
        '5_random.15': 'KL567954.1',
        '5_random.19': 'KL567957.1',
        '5_random.3': 'KL567958.1',
        '5_random.4': 'KL567959.1',
        '5_random.5': 'KL567960.1',
        '5_random.6': 'KL567961.1',
        '5_random.9': 'KL567964.1',
        '6_random.1': 'KL567965.1',
        '6_random.10': 'KL567966.1',
        '6_random.11': 'KL567967.1',
        '6_random.2': 'KL567968.1',
        '6_random.3': 'KL567969.1',
        '6_random.4': 'KL567970.1',
        '6_random.5': 'KL567971.1',
        '6_random.6': 'KL567972.1',
        '6_random.8': 'KL567973.1',
        '6_random.9': 'KL567974.1',
        '7_random.10': 'KL567975.1',
        '7_random.11': 'KL567976.1',
        '7_random.15': 'KL567980.1',
        '7_random.16': 'KL567981.1',
        '7_random.17': 'KL567982.1',
        '7_random.18': 'KL567983.1',
        '7_random.19': 'KL567984.1',
        '7_random.20': 'KL567986.1',
        '7_random.21': 'KL567987.1',
        '7_random.24': 'KL567988.1',
        '7_random.5': 'KL567991.1',
        '7_random.8': 'KL567993.1',
        '7_random.9': 'KL567994.1',
        '8_random.1': 'KL567995.1',
        '8_random.3': 'KL567997.1',
        '8_random.5': 'KL567999.1',
        '8_random.8': 'KL568001.1',
        '9_random.1': 'KL568003.1',
        '9_random.5': 'KL568005.1',
        '9_random.6': 'KL568006.1',
        '9_random.7': 'KL568007.1',
        '10_random.10': 'KL568009.1',
        '10_random.11': 'KL568010.1',
        '10_random.13': 'KL568011.1',
        '10_random.2': 'KL568012.1',
        '10_random.3': 'KL568013.1',
        '10_random.6': 'KL568015.1',
        '10_random.7': 'KL568016.1',
        '10_random.8': 'KL568017.1',
        '10_random.9': 'KL568018.1',
        '11_random.1': 'KL568019.1',
        '11_random.10': 'KL568020.1',
        '11_random.11': 'KL568021.1',
        '11_random.15': 'KL568024.1',
        '11_random.2': 'KL568026.1',
        '11_random.4': 'KL568028.1',
        '11_random.5': 'KL568029.1',
        '11_random.6': 'KL568030.1',
        '11_random.8': 'KL568031.1',
        '12_random.1': 'KL568032.1',
        '12_random.10': 'KL568033.1',
        '12_random.3': 'KL568035.1',
        '12_random.7': 'KL568038.1',
        '12_random.8': 'KL568039.1',
        '12_random.9': 'KL568040.1',
        '13_random.12': 'AABR07050784.1',
        '13_random.1': 'KL568041.1',
        '13_random.10': 'KL568042.1',
        '13_random.2': 'KL568044.1',
        '13_random.3': 'KL568045.1',
        '13_random.4': 'KL568046.1',
        '13_random.5': 'KL568047.1',
        '13_random.6': 'KL568048.1',
        '13_random.7': 'KL568049.1',
        '13_random.9': 'KL568051.1',
        '14_random.1': 'KL568052.1',
        '14_random.10': 'KL568053.1',
        '14_random.2': 'KL568054.1',
        '14_random.5': 'KL568057.1',
        '14_random.6': 'KL568058.1',
        '14_random.7': 'KL568059.1',
        '15_random.1': 'KL568062.1',
        '15_random.10': 'KL568063.1',
        '15_random.11': 'KL568064.1',
        '15_random.13': 'KL568066.1',
        '15_random.14': 'KL568067.1',
        '15_random.2': 'KL568068.1',
        '15_random.4': 'KL568070.1',
        '15_random.6': 'KL568072.1',
        '15_random.9': 'KL568074.1',
        '16_random.1': 'KL568075.1',
        '16_random.2': 'KL568078.1',
        '16_random.4': 'KL568079.1',
        '16_random.5': 'KL568080.1',
        '16_random.6': 'KL568081.1',
        '17_random.10': 'KL568084.1',
        '17_random.11': 'KL568085.1',
        '17_random.12': 'KL568086.1',
        '17_random.13': 'KL568087.1',
        '17_random.14': 'KL568088.1',
        '17_random.2': 'KL568089.1',
        '17_random.4': 'KL568091.1',
        '17_random.8': 'KL568092.1',
        '18_random.2': 'KL568095.1',
        '18_random.5': 'KL568096.1',
        '18_random.6': 'KL568097.1',
        '18_random.9': 'KL568099.1',
        '19_random.1': 'KL568100.1',
        '19_random.2': 'KL568101.1',
        '19_random.3': 'KL568102.1',
        '20_random.10': 'KL568103.1',
        '20_random.2': 'KL568104.1',
        '20_random.6': 'KL568107.1',
        '20_random.7': 'KL568108.1',
        '20_random.8': 'KL568109.1',
        '20_random.9': 'KL568110.1',
        'X_random.10': 'KL568111.1',
        'X_random.11': 'KL568112.1',
        'X_random.12': 'KL568113.1',
        'X_random.13': 'KL568114.1',
        'X_random.17': 'KL568116.1',
        'X_random.18': 'KL568117.1',
        'X_random.19': 'KL568118.1',
        'X_random.21': 'KL568120.1',
        'X_random.22': 'KL568121.1',
        'X_random.23': 'KL568122.1',
        'X_random.27': 'KL568125.1',
        'X_random.28': 'KL568126.1',
        'X_random.3': 'KL568128.1',
        'X_random.33': 'KL568132.1',
        'X_random.4': 'KL568135.1',
        'X_random.7': 'KL568136.1',
        'X_random.8': 'KL568137.1',
        'Y_random.1': 'KL568139.1',
        'Y_random.10': 'KL568140.1',
        'Y_random.11': 'KL568141.1',
        'Y_random.13': 'KL568143.1',
        'Y_random.14': 'KL568144.1',
        'Y_random.15': 'KL568145.1',
        'Y_random.16': 'KL568146.1',
        'Y_random.17': 'KL568147.1',
        'Y_random.18': 'KL568148.1',
        'Y_random.19': 'KL568149.1',
        'Y_random.2': 'KL568150.1',
        'Y_random.20': 'KL568151.1',
        'Y_random.21': 'KL568152.1',
        'Y_random.22': 'KL568153.1',
        'Y_random.23': 'KL568154.1',
        'Y_random.24': 'KL568155.1',
        'Y_random.25': 'KL568156.1',
        'Y_random.26': 'KL568157.1',
        'Y_random.27': 'KL568158.1',
        'Y_random.28': 'KL568159.1',
        'Y_random.3': 'KL568160.1',
        'Y_random.4': 'KL568161.1',
        'Y_random.5': 'KL568162.1',
        'Y_random.6': 'KL568163.1',
        'Y_random.7': 'KL568164.1',
        'Y_random.9': 'KL568166.1',
        'Un.51': 'AABR07022335.1',
        'Un.157': 'AABR07022630.1',
        'Un.270': 'AABR07022923.1',
        'Un.275': 'AABR07022934.1',
        'Un.422': 'AABR07024031.1',
        'Un.423': 'AABR07024032.1',
        'Un.425': 'AABR07024039.1',
        'Un.449': 'AABR07024101.1',
        'Un.474': 'AABR07024145.1',
        'Un.476': 'AABR07024150.1',
        'Un.490': 'AABR07024188.1',
        'Un.494': 'AABR07024193.1',
        'Un.534': 'AABR07024291.1',
        'Un.540': 'AABR07024304.1',
        'Un.564': 'AABR07024374.1',
        'Un.566': 'AABR07024382.1',
        'Un.572': 'AABR07024393.1',
        'Un.573': 'AABR07024394.1',
        'Un.574': 'AABR07024395.1',
        'Un.577': 'AABR07024398.1',
        'Un.1': 'KL568167.1',
        'Un.100': 'KL568169.1',
        'Un.103': 'KL568170.1',
        'Un.106': 'KL568173.1',
        'Un.107': 'KL568174.1',
        'Un.109': 'KL568176.1',
        'Un.11': 'KL568177.1',
        'Un.126': 'KL568187.1',
        'Un.129': 'KL568190.1',
        'Un.130': 'KL568191.1',
        'Un.133': 'KL568193.1',
        'Un.138': 'KL568197.1',
        'Un.140': 'KL568198.1',
        'Un.165': 'KL568212.1',
        'Un.169': 'KL568215.1',
        'Un.175': 'KL568218.1',
        'Un.176': 'KL568219.1',
        'Un.183': 'KL568224.1',
        'Un.189': 'KL568228.1',
        'Un.196': 'KL568233.1',
        'Un.201': 'KL568237.1',
        'Un.212': 'KL568245.1',
        'Un.219': 'KL568251.1',
        'Un.227': 'KL568257.1',
        'Un.229': 'KL568259.1',
        'Un.236': 'KL568263.1',
        'Un.245': 'KL568270.1',
        'Un.251': 'KL568274.1',
        'Un.262': 'KL568281.1',
        'Un.266': 'KL568282.1',
        'Un.27': 'KL568283.1',
        'Un.279': 'KL568289.1',
        'Un.284': 'KL568292.1',
        'Un.296': 'KL568299.1',
        'Un.298': 'KL568300.1',
        'Un.302': 'KL568304.1',
        'Un.314': 'KL568312.1',
        'Un.315': 'KL568313.1',
        'Un.32': 'KL568316.1',
        'Un.331': 'KL568328.1',
        'Un.333': 'KL568330.1',
        'Un.340': 'KL568337.1',
        'Un.348': 'KL568342.1',
        'Un.352': 'KL568346.1',
        'Un.354': 'KL568348.1',
        'Un.361': 'KL568354.1',
        'Un.363': 'KL568355.1',
        'Un.382': 'KL568374.1',
        'Un.389': 'KL568381.1',
        'Un.391': 'KL568383.1',
        'Un.392': 'KL568384.1',
        'Un.395': 'KL568387.1',
        'Un.396': 'KL568388.1',
        'Un.397': 'KL568389.1',
        'Un.4': 'KL568391.1',
        'Un.40': 'KL568392.1',
        'Un.401': 'KL568394.1',
        'Un.402': 'KL568395.1',
        'Un.406': 'KL568397.1',
        'Un.407': 'KL568398.1',
        'Un.408': 'KL568399.1',
        'Un.409': 'KL568400.1',
        'Un.410': 'KL568402.1',
        'Un.412': 'KL568403.1',
        'Un.413': 'KL568404.1',
        'Un.414': 'KL568405.1',
        'Un.416': 'KL568406.1',
        'Un.420': 'KL568408.1',
        'Un.421': 'KL568409.1',
        'Un.424': 'KL568410.1',
        'Un.434': 'KL568412.1',
        'Un.435': 'KL568413.1',
        'Un.436': 'KL568414.1',
        'Un.437': 'KL568415.1',
        'Un.440': 'KL568417.1',
        'Un.442': 'KL568418.1',
        'Un.444': 'KL568419.1',
        'Un.445': 'KL568420.1',
        'Un.447': 'KL568421.1',
        'Un.455': 'KL568423.1',
        'Un.456': 'KL568424.1',
        'Un.469': 'KL568428.1',
        'Un.470': 'KL568430.1',
        'Un.471': 'KL568431.1',
        'Un.473': 'KL568432.1',
        'Un.475': 'KL568433.1',
        'Un.477': 'KL568434.1',
        'Un.480': 'KL568436.1',
        'Un.483': 'KL568438.1',
        'Un.486': 'KL568439.1',
        'Un.488': 'KL568440.1',
        'Un.492': 'KL568441.1',
        'Un.498': 'KL568442.1',
        'Un.5': 'KL568444.1',
        'Un.504': 'KL568445.1',
        'Un.505': 'KL568446.1',
        'Un.506': 'KL568447.1',
        'Un.515': 'KL568449.1',
        'Un.516': 'KL568450.1',
        'Un.517': 'KL568451.1',
        'Un.526': 'KL568452.1',
        'Un.527': 'KL568453.1',
        'Un.528': 'KL568454.1',
        'Un.531': 'KL568456.1',
        'Un.538': 'KL568457.1',
        'Un.539': 'KL568458.1',
        'Un.541': 'KL568460.1',
        'Un.542': 'KL568461.1',
        'Un.543': 'KL568462.1',
        'Un.549': 'KL568463.1',
        'Un.552': 'KL568464.1',
        'Un.553': 'KL568465.1',
        'Un.557': 'KL568466.1',
        'Un.558': 'KL568467.1',
        'Un.559': 'KL568468.1',
        'Un.560': 'KL568470.1',
        'Un.561': 'KL568471.1',
        'Un.563': 'KL568472.1',
        'Un.565': 'KL568473.1',
        'Un.568': 'KL568474.1',
        'Un.569': 'KL568475.1',
        'Un.579': 'KL568477.1',
        'Un.58': 'KL568478.1',
        'Un.580': 'KL568479.1',
        'Un.581': 'KL568480.1',
        'Un.582': 'KL568481.1',
        'Un.583': 'KL568482.1',
        'Un.586': 'KL568484.1',
        'Un.587': 'KL568485.1',
        'Un.59': 'KL568486.1',
        'Un.590': 'KL568487.1',
        'Un.61': 'KL568488.1',
        'Un.65': 'KL568490.1',
        'Un.68': 'KL568492.1',
        'Un.69': 'KL568493.1',
        'Un.70': 'KL568495.1',
        'Un.80': 'KL568503.1',
        'Un.9': 'KL568510.1',
        'Un.90': 'KL568511.1',
        'Un.92': 'KL568512.1',
        'Un.94': 'KL568514.1'
    }


def correct(mongo_source):
    contig_equivalents = get_contig_equivalents()
    sve_collection = mongo_source.mongo_handle[mongo_source.db_name]["submittedVariantEntity"]
    insert_statements, drop_statements = get_insert_statements(sve_collection, contig_equivalents)

    total_inserted = 0
    total_dropped = 0
    try:
        result_insert = sve_collection.with_options(write_concern=WriteConcern(w="majority", wtimeout=1200000)) \
            .bulk_write(requests=insert_statements, ordered=False)
        total_inserted += result_insert.inserted_count
        logger.info(f"{total_inserted} new documents inserted")
        result_drop = sve_collection.with_options(write_concern=WriteConcern(w="majority", wtimeout=1200000)) \
            .bulk_write(requests=drop_statements, ordered=False)
        total_dropped += result_drop.deleted_count
        logger.info(f"{total_dropped} wrong documents dropped")
        return total_inserted, total_dropped
    except Exception as e:
        print(traceback.format_exc())
        raise e


def get_insert_statements(sve_collection, contig_equivalents):
    wrong_contigs = list(contig_equivalents.keys())
    filter_criteria = {'seq': 'GCA_000001895.4', 'study': 'PRJEB42012', 'contig': {'$in': wrong_contigs}}
    cursor = sve_collection.with_options(read_concern=ReadConcern("majority")).find(filter_criteria,
                                                                                    no_cursor_timeout=True)
    insert_statements = []
    drop_statements = []
    try:
        for variant in cursor:
            original_id = get_SHA1(variant)
            assert variant['_id'] == original_id, f"Original id is different from the one calculated " \
                                                  f"{variant['_id']} != {original_id}"
            variant['contig'] = contig_equivalents[variant['contig']]
            variant['_id'] = get_SHA1(variant)
            insert_statements.append(pymongo.InsertOne(variant))
            drop_statements.append(pymongo.DeleteOne({'_id': original_id}))
    except Exception as e:
        print(traceback.format_exc())
        raise e
    finally:
        cursor.close()

    return insert_statements, drop_statements


def main():
    parser = argparse.ArgumentParser(description='Correct contigs in study PRJEB42012', add_help=False)
    parser.add_argument("--mongo-source-uri",
                        help="Mongo Source URI (ex: mongodb://user:@mongos-source-host:27017/admin)", required=True)
    parser.add_argument("--mongo-source-secrets-file",
                        help="Full path to the Mongo Source secrets file (ex: /path/to/mongo/source/secret)",
                        required=True)
    args = parser.parse_args()
    mongo_source = MongoDatabase(uri=args.mongo_source_uri, secrets_file=args.mongo_source_secrets_file,
                                 db_name="eva_accession_sharded")

    correct(mongo_source)


if __name__ == "__main__":
    main()
